<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="https://raw.githubusercontent.com/shalvah/DownloadThisVideo/master/favicon.ico"
          type="image/x-icon"/>

    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', Calibri, sans-serif;
            height: 100%;
            box-sizing: border-box;
            padding: 20px;
            display: flex;
            flex-direction: column;
            font-size: 1.2em;
        }

        .content {
            flex-grow: 1;
        }

        footer {
            text-align: center;
            padding-bottom: 10px;
        }

        a {
            text-decoration: none;
        }

    </style>
    <title>{{ username }}'s downloads by @this_vid</title>
</head>

<body>
<div class="content">
    <h2>{{ username }}'s downloads</h2>
    <p>
        <small>Downloads you've requested via @this_vid in the past 48 hours show up here.</small>
    </p>
    {{#each downloads }}
        <small>{{ this.time }}</small>
        <div><a href="{{ this.videoUrl }}" target="_blank">Video link</a> &bullet; <a
                href="https://twitter.com/statuses/{{ this.tweet }}" target="_blank">View tweet</a></div>
        <br>
    {{/each}}

    <div id="permission_div" style="display: none;">
        <h4>Needs Permission</h4>
        <p id="token"></p>
        <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                onclick="requestPermission()">Request Permission</button>
    </div>
</div>

<footer style="margin-bottom: 0; padding-bottom: 0">
    <div>
        <small>
            <a href="{{{ link.url }}}"><b>Sponsored: </b>{{ link.text }}</a>
        </small>
    </div>
    <br>
    <div>
        <small>
            <a href="https://www.patreon.com/shalvah">Support @this_vid</a>
            &nbsp;|&nbsp;
            <a href="./faq">See our FAQ</a>
            &nbsp;|&nbsp;
            <a href="https://github.com/shalvah/DownloadThisVideo">Check out the source code</a>
        </small>
    </div>
</footer>

<script src="https://www.gstatic.com/firebasejs/6.6.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/6.6.1/firebase-messaging.js"></script>

<script>
    function enableBetaIfRequested() {
        const url = new URL(window.location);
        const params = new URLSearchParams(url.search);
        if (params.has('beta')) {
            window.inBeta = true;
            document.getElementById('permission_div').style.display = "visible";
            enableAndConfigurePushNotifications();
        }
    }

    enableBetaIfRequested();
</script>

<script>
    function enableAndConfigurePushNotifications() {
        if (!window.inBeta) {
            return;
        }

        initializeFirebase();

        setTokenRefreshHandler();

        setNewMessageHandler();

    }

    function initializeFirebase() {
        var firebaseConfig = {
            apiKey: "AIzaSyCj2NkmY_s5WaIrTppLiXyavurIuFiW9N4",
            authDomain: "downloadthisvideo-662ae.firebaseapp.com",
            databaseURL: "https://downloadthisvideo-662ae.firebaseio.com",
            projectId: "downloadthisvideo-662ae",
            storageBucket: "",
            messagingSenderId: "118497632459",
            appId: "1:118497632459:web:c5a53bf01c2547a9fbfb4e"
        };
        firebase.initializeApp(firebaseConfig);
        window.messaging = firebase.messaging();
        messaging.usePublicVapidKey("BPWZObbrWgRIOpHwSfJBAHh2GLMFcTFX2tYzrBPE5-_yGTeg_EY7bo5naJ2zFLoAZW1Vf5U3wcZUraZLxHA6rWU");
    }

    function setTokenRefreshHandler() {
        messaging.onTokenRefresh(() => {
            messaging.getToken()
                    .then((refreshedToken) => {
                        console.log('Token refreshed.');
                        setTokenSentToServer(false);
                        sendTokenToServer(refreshedToken);
                        resetUI();
                    })
                    .catch((err) => {
                        console.log('Unable to retrieve refreshed token ', err);
                    });
        });
    }

    function setNewMessageHandler() {
        messaging.onMessage((payload) => {
            console.log('Message received. ', payload);
            if (Notification.permission == 'granted') {
                navigator.serviceWorker.getRegistration().then((reg) => {
                    reg.showNotification(payload.title, {data: payload.username});
                });
            }
        });
    }

    function resetUI() {
        messaging.getToken().then((currentToken) => {
            if (currentToken && !isTokenSentToServer()) {
                sendTokenToServer(currentToken);
                updateUIForPushEnabled(currentToken);
            } else {
                console.log('No Instance ID token available. Request permission to generate one.');
                updateUIForPushPermissionRequired();
                setTokenSentToServer(false);
            }
        }).catch((err) => {
            console.log('An error occurred while retrieving token. ', err);
            setTokenSentToServer(false);
        });
    }

    function updateUIForPushEnabled() {
        // Here you hide the button that they can click to trigger permission request
    }

    function updateUIForPushPermissionRequired() {
        // Here you just show the button that they can click to trigger permission request
    }

    function sendTokenToServer(currentToken) {
        if (!isTokenSentToServer()) {
            console.log('Sending token to server...');
            fetch("_/fbt", {
                method: 'POST',
                mode: 'cors',
                body: JSON.stringify({ username, token: currentToken }),
                redirect: 'follow',
                headers: { 'Content-Type': 'application/json' },
            }).then(r => {
                if (r.ok) {
                    console.log("Token sent to server successfully");
                    setTokenSentToServer(true);
                } else {
                    console.log("Token failed to send to server");
                    r.json().then(console.log);
                }
            });
        } else {
            console.log('Token already sent to server so won\'t send it again ' +
                    'unless it changes');
        }
    }

    function setTokenSentToServer(sent) {
        window.localStorage.setItem('sentToServer', sent ? '1' : '0');
    }

    function isTokenSentToServer() {
        return window.localStorage.getItem('sentToServer') == '1';
    }

    function requestPermission() {
        Notification.requestPermission()
                .then((permission) => {
                    if (permission === 'granted') {
                        console.log('Notification permission granted.');
                        resetUI();
                    } else {
                        console.log('Unable to get permission to notify.');
                    }
                });
    }
</script>
</body>
